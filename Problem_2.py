#Problem 2

"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
"""

#THE BRIEF
"""
The previous file was laced with comments at nearly every line. This file will attempt to have less.
Preceding the fcn will be a little explanation of what the fcn does, a tad description on logic,
    and comments above unclear parts of the code
    
Now the problem:
Need to be able to find the terms in the fibonacci sequence up to a certain number (Example: 10 | Problem: 4M)
Need to determine the even-valued terms and find their sum

Process:
This is another one fcn solution, it's simple enough where all the logic can be contained in a while loop.
While the term is less than the 'do not exceed value,' if the term is even, add it to the sum 
"""


#function takes an integer (int), no_pass, that is the 'do not exceed value.' no fibonacci term i find shall exceed it
#the fcn finds the sum of the even-valued fibonacci terms that do not exceed no_pass
def fib_sum(no_pass):

    #fib_sum_var is will be the total sum that ends up in the return statement.
    #it starts at 2 bc 1 and 2 are the given first two values, and 2 is even
    fib_sum_var = 2

    #a is the first fib term; b is the second; c_term is next term
    a = 1
    b = 2
    c_term = b+a

    #as long as the next fib c_term is less than the 'do not exceed value,' even values keep getting added
    while c_term < no_pass+1:

        #if my fib c_term is even, it gets added to the total
        if c_term % 2 == 0:
            fib_sum_var+=c_term

        #finds the next fib c_term
        if b > a:
            a+=b
            c_term=a
        elif a > b:
            b+=a
            c_term=b

    #result is returned once the loop is broken
    return fib_sum_var


def main():
    print(fib_sum(4000000))

if __name__ == "__main__":
    main()


#THE DEBRIEF
"""
We could have solved this problem in a few different ways, one being with a recursive fcn
Could have used two fcns. The recursive one below to find the next term, and the above fcn.
the recursive fcn would have been used instead of the latter if/else statements

#Find the nth term of the fib sequence
def rec_fib(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        return rec_fib(n-1) + rec_fib(n-2)
"""
